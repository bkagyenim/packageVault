/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as StoreImport } from './routes/store'
import { Route as StaffVaultImport } from './routes/staffVault'
import { Route as StaffMessageImport } from './routes/staffMessage'
import { Route as StaffDashboardImport } from './routes/staffDashboard'
import { Route as StaffImport } from './routes/staff'
import { Route as RegisterImport } from './routes/register'
import { Route as LoginImport } from './routes/login'
import { Route as FooterImport } from './routes/footer'
import { Route as FirebaseServiceImport } from './routes/firebaseService'
import { Route as CustomerSupportImport } from './routes/customerSupport'
import { Route as CustomerPendingImport } from './routes/customerPending'
import { Route as CustomerDashboardImport } from './routes/customerDashboard'
import { Route as CustomerCompletedImport } from './routes/customerCompleted'
import { Route as CourierSizeImport } from './routes/courierSize'
import { Route as CourierPageImport } from './routes/courierPage'
import { Route as ContactImport } from './routes/contact'
import { Route as AboutImport } from './routes/about'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const VaultServiceRoute = VaultServiceImport.update({
  id: '/vaultService',
  path: '/vaultService',
  getParentRoute: () => rootRoute,
} as any)

const StoreRoute = StoreImport.update({
  id: '/store',
  path: '/store',
  getParentRoute: () => rootRoute,
} as any)

const StaffVaultRoute = StaffVaultImport.update({
  id: '/staffVault',
  path: '/staffVault',
  getParentRoute: () => rootRoute,
} as any)

const StaffMessageRoute = StaffMessageImport.update({
  id: '/staffMessage',
  path: '/staffMessage',
  getParentRoute: () => rootRoute,
} as any)

const StaffDashboardRoute = StaffDashboardImport.update({
  id: '/staffDashboard',
  path: '/staffDashboard',
  getParentRoute: () => rootRoute,
} as any)

const StaffRoute = StaffImport.update({
  id: '/staff',
  path: '/staff',
  getParentRoute: () => rootRoute,
} as any)

const RegisterRoute = RegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const FooterRoute = FooterImport.update({
  id: '/footer',
  path: '/footer',
  getParentRoute: () => rootRoute,
} as any)



const CustomerSupportRoute = CustomerSupportImport.update({
  id: '/customerSupport',
  path: '/customerSupport',
  getParentRoute: () => rootRoute,
} as any)

const CustomerPendingRoute = CustomerPendingImport.update({
  id: '/customerPending',
  path: '/customerPending',
  getParentRoute: () => rootRoute,
} as any)

const CustomerDashboardRoute = CustomerDashboardImport.update({
  id: '/customerDashboard',
  path: '/customerDashboard',
  getParentRoute: () => rootRoute,
} as any)

const CustomerCompletedRoute = CustomerCompletedImport.update({
  id: '/customerCompleted',
  path: '/customerCompleted',
  getParentRoute: () => rootRoute,
} as any)

const CourierSizeRoute = CourierSizeImport.update({
  id: '/courierSize',
  path: '/courierSize',
  getParentRoute: () => rootRoute,
} as any)

const CourierPageRoute = CourierPageImport.update({
  id: '/courierPage',
  path: '/courierPage',
  getParentRoute: () => rootRoute,
} as any)

const ContactRoute = ContactImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/contact': {
      id: '/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactImport
      parentRoute: typeof rootRoute
    }
    '/courierPage': {
      id: '/courierPage'
      path: '/courierPage'
      fullPath: '/courierPage'
      preLoaderRoute: typeof CourierPageImport
      parentRoute: typeof rootRoute
    }
    '/courierSize': {
      id: '/courierSize'
      path: '/courierSize'
      fullPath: '/courierSize'
      preLoaderRoute: typeof CourierSizeImport
      parentRoute: typeof rootRoute
    }
    '/customerCompleted': {
      id: '/customerCompleted'
      path: '/customerCompleted'
      fullPath: '/customerCompleted'
      preLoaderRoute: typeof CustomerCompletedImport
      parentRoute: typeof rootRoute
    }
    '/customerDashboard': {
      id: '/customerDashboard'
      path: '/customerDashboard'
      fullPath: '/customerDashboard'
      preLoaderRoute: typeof CustomerDashboardImport
      parentRoute: typeof rootRoute
    }
    '/customerPending': {
      id: '/customerPending'
      path: '/customerPending'
      fullPath: '/customerPending'
      preLoaderRoute: typeof CustomerPendingImport
      parentRoute: typeof rootRoute
    }
    '/customerSupport': {
      id: '/customerSupport'
      path: '/customerSupport'
      fullPath: '/customerSupport'
      preLoaderRoute: typeof CustomerSupportImport
      parentRoute: typeof rootRoute
    }
    
    '/footer': {
      id: '/footer'
      path: '/footer'
      fullPath: '/footer'
      preLoaderRoute: typeof FooterImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterImport
      parentRoute: typeof rootRoute
    }
    '/staff': {
      id: '/staff'
      path: '/staff'
      fullPath: '/staff'
      preLoaderRoute: typeof StaffImport
      parentRoute: typeof rootRoute
    }
    '/staffDashboard': {
      id: '/staffDashboard'
      path: '/staffDashboard'
      fullPath: '/staffDashboard'
      preLoaderRoute: typeof StaffDashboardImport
      parentRoute: typeof rootRoute
    }
    '/staffMessage': {
      id: '/staffMessage'
      path: '/staffMessage'
      fullPath: '/staffMessage'
      preLoaderRoute: typeof StaffMessageImport
      parentRoute: typeof rootRoute
    }
    '/staffVault': {
      id: '/staffVault'
      path: '/staffVault'
      fullPath: '/staffVault'
      preLoaderRoute: typeof StaffVaultImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/contact': typeof ContactRoute
  '/courierPage': typeof CourierPageRoute
  '/courierSize': typeof CourierSizeRoute
  '/customerCompleted': typeof CustomerCompletedRoute
  '/customerDashboard': typeof CustomerDashboardRoute
  '/customerPending': typeof CustomerPendingRoute
  '/customerSupport': typeof CustomerSupportRoute
  '/footer': typeof FooterRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/staff': typeof StaffRoute
  '/staffDashboard': typeof StaffDashboardRoute
  '/staffMessage': typeof StaffMessageRoute
  '/staffVault': typeof StaffVaultRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/contact': typeof ContactRoute
  '/courierPage': typeof CourierPageRoute
  '/courierSize': typeof CourierSizeRoute
  '/customerCompleted': typeof CustomerCompletedRoute
  '/customerDashboard': typeof CustomerDashboardRoute
  '/customerPending': typeof CustomerPendingRoute
  '/customerSupport': typeof CustomerSupportRoute
  '/firebaseService': typeof FirebaseServiceRoute
  '/footer': typeof FooterRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/staff': typeof StaffRoute
  '/staffDashboard': typeof StaffDashboardRoute
  '/staffMessage': typeof StaffMessageRoute
  '/staffVault': typeof StaffVaultRoute
  '/store': typeof StoreRoute
  '/vaultService': typeof VaultServiceRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/contact': typeof ContactRoute
  '/courierPage': typeof CourierPageRoute
  '/courierSize': typeof CourierSizeRoute
  '/customerCompleted': typeof CustomerCompletedRoute
  '/customerDashboard': typeof CustomerDashboardRoute
  '/customerPending': typeof CustomerPendingRoute
  '/customerSupport': typeof CustomerSupportRoute
  '/firebaseService': typeof FirebaseServiceRoute
  '/footer': typeof FooterRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/staff': typeof StaffRoute
  '/staffDashboard': typeof StaffDashboardRoute
  '/staffMessage': typeof StaffMessageRoute
  '/staffVault': typeof StaffVaultRoute
  '/store': typeof StoreRoute
  '/vaultService': typeof VaultServiceRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/contact'
    | '/courierPage'
    | '/courierSize'
    | '/customerCompleted'
    | '/customerDashboard'
    | '/customerPending'
    | '/customerSupport'
    | '/firebaseService'
    | '/footer'
    | '/login'
    | '/register'
    | '/staff'
    | '/staffDashboard'
    | '/staffMessage'
    | '/staffVault'
    | '/store'
    | '/vaultService'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/contact'
    | '/courierPage'
    | '/courierSize'
    | '/customerCompleted'
    | '/customerDashboard'
    | '/customerPending'
    | '/customerSupport'
    | '/firebaseService'
    | '/footer'
    | '/login'
    | '/register'
    | '/staff'
    | '/staffDashboard'
    | '/staffMessage'
    | '/staffVault'
    | '/store'
    | '/vaultService'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/contact'
    | '/courierPage'
    | '/courierSize'
    | '/customerCompleted'
    | '/customerDashboard'
    | '/customerPending'
    | '/customerSupport'
    | '/firebaseService'
    | '/footer'
    | '/login'
    | '/register'
    | '/staff'
    | '/staffDashboard'
    | '/staffMessage'
    | '/staffVault'
    | '/store'
    | '/vaultService'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  ContactRoute: typeof ContactRoute
  CourierPageRoute: typeof CourierPageRoute
  CourierSizeRoute: typeof CourierSizeRoute
  CustomerCompletedRoute: typeof CustomerCompletedRoute
  CustomerDashboardRoute: typeof CustomerDashboardRoute
  CustomerPendingRoute: typeof CustomerPendingRoute
  CustomerSupportRoute: typeof CustomerSupportRoute
  FirebaseServiceRoute: typeof FirebaseServiceRoute
  FooterRoute: typeof FooterRoute
  LoginRoute: typeof LoginRoute
  RegisterRoute: typeof RegisterRoute
  StaffRoute: typeof StaffRoute
  StaffDashboardRoute: typeof StaffDashboardRoute
  StaffMessageRoute: typeof StaffMessageRoute
  StaffVaultRoute: typeof StaffVaultRoute
  StoreRoute: typeof StoreRoute
  VaultServiceRoute: typeof VaultServiceRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  ContactRoute: ContactRoute,
  CourierPageRoute: CourierPageRoute,
  CourierSizeRoute: CourierSizeRoute,
  CustomerCompletedRoute: CustomerCompletedRoute,
  CustomerDashboardRoute: CustomerDashboardRoute,
  CustomerPendingRoute: CustomerPendingRoute,
  CustomerSupportRoute: CustomerSupportRoute,
  FirebaseServiceRoute: FirebaseServiceRoute,
  FooterRoute: FooterRoute,
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
  StaffRoute: StaffRoute,
  StaffDashboardRoute: StaffDashboardRoute,
  StaffMessageRoute: StaffMessageRoute,
  StaffVaultRoute: StaffVaultRoute,
  StoreRoute: StoreRoute,
  VaultServiceRoute: VaultServiceRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/contact",
        "/courierPage",
        "/courierSize",
        "/customerCompleted",
        "/customerDashboard",
        "/customerPending",
        "/customerSupport",
        "/firebaseService",
        "/footer",
        "/login",
        "/register",
        "/staff",
        "/staffDashboard",
        "/staffMessage",
        "/staffVault",
        "/store",
        "/vaultService"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/contact": {
      "filePath": "contact.tsx"
    },
    "/courierPage": {
      "filePath": "courierPage.tsx"
    },
    "/courierSize": {
      "filePath": "courierSize.tsx"
    },
    "/customerCompleted": {
      "filePath": "customerCompleted.tsx"
    },
    "/customerDashboard": {
      "filePath": "customerDashboard.tsx"
    },
    "/customerPending": {
      "filePath": "customerPending.tsx"
    },
    "/customerSupport": {
      "filePath": "customerSupport.tsx"
    },
    "/firebaseService": {
      "filePath": "firebaseService.ts"
    },
    "/footer": {
      "filePath": "footer.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/register": {
      "filePath": "register.tsx"
    },
    "/staff": {
      "filePath": "staff.tsx"
    },
    "/staffDashboard": {
      "filePath": "staffDashboard.tsx"
    },
    "/staffMessage": {
      "filePath": "staffMessage.tsx"
    },
    "/staffVault": {
      "filePath": "staffVault.tsx"
    },
    "/store": {
      "filePath": "store.ts"
    },
    "/vaultService": {
      "filePath": "vaultService.ts"
    }
  }
}
ROUTE_MANIFEST_END */
